
Phone Shortcuts
===============

This is basically a description of how "unphone" works.

I have ended up in the past doing a decent amount of writing on my
phone, and I wanted to have a way to support that.  In particular,
typing out [foo](bar) for a link on basically any phone every is a
terrible pain in the ass.

This led to the first form of markup that unphone supports:

    qwl look a link! qwu https://www.google.com/ qw

becomes

    [look a link!](https://www.google.com)

There is additional complexity, though, when we use a
local/wiki-style link; that is, a link that isn't a URL and doesn't
appear to match a file name, like this:

    qwl local link title/text qwu how wifi works qw

That complexity lives in rectifier; see [Wiki Links].

The Substitutions
-----------------

     qwl x qw                [x](x)
     qwl x qwu y qw          [x](y) qwu == url (although it's not usually an actual URL)

Wiki Links
==========

Wiki links are links in the markdown to items elsewhere in our blog,
rather than to external items, that are linked by title.

Wiki links are checked and sanitized by "rectifier"; the actual
linking to the final HTML location is handled by "hblog".

Rectification
-------------

An example:

    [local link text](how wifi works)

Note that "how wifi works" is not actually the correct, full title;
it's "How WiFi Actually Works".  Rectifier's job is to find these
cases and make them be titled exactly correctly for the current
version of the file's title.

This proceeds as follows:

NB: All steps (except the last) fail on multiple matches!

0.  If the link contains exactly one # , treat it as a fragment
    style link.  Run through all the steps below on the left side,
    and *if* we get a match, run through all the steps below on the
    right side but limit the possible targets to the headers in the
    file we found in the first pass. If both passes work, rectify
    the link to "[actual title]#[actual header]".  If it's not a
    fragment style linke, run through all the steps below first with
    just headers in this same file, and then with all titles.

1.  If the link text is a valid URL, leave it alone.

2.  If the link text matches the title (in the YAML metadata) of a
    file, rectify it to the actual title (aka do nothing).

3.  If the link text case-insensitively matches the title (in the
    YAML metadata) of a file, rectify it to the actual title (aka do
    nothing).

4.  If the link text matches the filename (with or without .md) of a
    file, rectify it to the actual title.

5.  If the link text case-insensitively matches the filename (with
    or without .md) of a file, rectify it to the actual title.

6.  Replace all whitespace in the link text with .* ; if exactly one
    file's title or filename matches the resulting regex, rectify
    the link text to that title.

7.  Sort every file title and filename by edit distance to the link
    text, present the first 10 to the user, and bail.

Linking
-------

During the actual "hblog" run, we figure out where the link should
actually be pointing and emit the appropriate HTML.  This proceeds
in the following order:

1.  If the target is a URI, do nothing.

2.  If the target exactly matches the title (in the YAML metadata)
    of a file, link to that.

3.  If the target exactly matches a header name in the current file,
    do nothing; this will be handled by Pandoc's usual markdown
    processing.

4.  If the target has exactly one # in it, and the part before the #
    exactly matches the title of a file, and the part after exactly
    matches the name of a header in that file, linke to that.

    FIXME: This is tricky becuase we may have to link to our best
    guess of the header identifier; hopefully we can get pandoc to
    tell us somehow?  See
    http://pandoc.org/MANUAL.html#extension-auto_identifiers and
    http://pandoc.org/MANUAL.html#extension-ascii_identifiers

Dates
=====

File dates are handled using the author timestamp of the git commits on the
files.  This is important because git commits have two timestamps, the commit
timestamp and the author timestamp, the latter being entirely up to the
committer, much like the name and email.

We track two dates for each file: initial/original commit and most recent
commit; these are presented to the user in the obvious way.  We get them like
so:

    # Original:
    $ git log --diff-filter=A --follow --format=%ai -n 1 -- app/hblog.hs
    2015-10-20 00:45:28 -0700

    # Most recent:
    $ git log --format=%ai -n 1 -- app/hblog.hs
    2016-11-28 23:50:34 -0800

The user can also override the initial date value using orig_date. This is
particularly useful when we don't actually know the original date.

Overriding last_mod_date is not supported, as it's too easy for that to stop
matching reality; make a git commit with the date you want if you need to lie
about the last_mod_date, that way any future changes will work correctly (as
long as they are checked in, which the scripting shuold force).

Redirects
=========

I want to redirect items from the old wikis and such, but I don't
want to have to maintain a master list.  Therefore, header tags like
this:

      redirect: '/.*foo.*'

become entries in a file named _site/redirects/[category], like so:

      RedirectMatch permanent "/.*foo.*" "http://rlpowell.digitalkingdom.org/bar/001.md"

Those redirects/ files can then be pointed at by Apache.

TikiWiki Conversion
===================

tiki_to_md is a partial implementation of TikiWiki markup as a
Pandoc reader.  Like the other programs, it takes an input directory
and an output directory, and walks the tree converting files and
placing them in the output directory.

Handling Lists
--------------

I had a lot of trouble with TikiWiki lists; i.e. stuff like:

* Level 1 (bulleted list)
** Level 2 (bulleted list)
### Level 3 (numbered list)
### Level 3 (numbered list)
** Level 2 (bulleted list)

Some of the problem was the actual conversion of a list of such
items into a nested tree, which led to the following code:

```
module Main where
  data Tree a = Leaf a | Branch [Tree a] deriving (Ord, Eq, Show)

  foo = [1,2,2,1,2,3,2]
  -- Should become:
  -- Branch [
  --    Leaf 1,
  --    Branch [
  --        Leaf 2,
  --        Leaf 2
  --    ],
  --    Leaf 1,
  --    Branch [
  --        Leaf 2,
  --        Branch [
  --            Leaf 3
  --        ],
  --        Leaf 2
  --   ]
  -- ]

  walkFoo :: Int -> [Int] -> ([Tree Int], [Int])
  walkFoo nest (item:rest) =
    case compare item nest of
      GT -> let (newTree, newList) = walkFoo (nest + 1) (item:rest)
                (newTree2, newList2) = walkFoo nest newList
            in
            ([Branch newTree] ++ newTree2, newList2)
      EQ -> let (newTree, newList) = walkFoo nest rest
            in
            ([Leaf item] ++ newTree, newList)
      LT -> ([], (item:rest))
  walkFoo nest [] = ([], [])

  main :: IO ()
  main = do
    putStrLn $ show $ walkFoo 0 foo
```

Specifically, I had trouble with constructing the GT case, which is
how we get a tree instead of single branch.  It's important to note
that for this to work, each recursive call needs to return both the
branch thus generated and the remainder of the list, for us to
operate on further in a new branch.

It turns out, though, that this isn't good enough as is, because
doing the obvious conversion of this code into Pandoc Reader code
doesn't get you nested lists.  That is, this:

```
*Main Text.Pandoc.Builder> putStrLn $ writeHtmlString def $ doc $ bulletList [ plain "bl1.1", plain "bl1.2", bulletList [ plain "bl2.1" ] ]
<ul>
<li>bl1.1</li>
<li>bl1.2</li>
<li><ul>
<li>bl2.1</li>
</ul></li>
</ul>
*Main Text.Pandoc.Builder> putStrLn $ writeMarkdown def $ doc $ bulletList [ plain "bl1.1", plain "bl1.2", bulletList [ plain "bl2.1" ] ]
-   bl1.1
-   bl1.2
-   -   bl2.1
```

doesn't work.  To get the behaviour we want requires instead:

```
*Main Text.Pandoc.Builder> putStrLn $ writeMarkdown def $ doc $ bulletList [ plain "bl1.1", mappend (plain "bl1.2") (bulletList [ plain "bl2.1" ]) ]
-   bl1.1
-   bl1.2
    -   bl2.1
```

Note that the mappend is joining two Blocks, aka Many Block; it's a
Text.Pandoc.Builder thing.  This means there are two monoids at the
level where the mappend occurs: the [...] of the bulletList [...],
and the Blocks of the items within that list.

Anyway, this makes everything much harder.

I eventually ended up doing two things:

1.  I changed the way the main list handling works; it now splits
    the list into "goes in the tree of the first item" and
    "everything else", recurses on those, and joins.  This
    simplificed things considerably, at least in terms of reasoning.
    This is spanFoldUpList
2.  I moved the mappend stuff out to a second pass over the data,
    because reasoning about both problems at once was just too
    difficult.  This is fixListNesting

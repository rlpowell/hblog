[1:NOTES][2:DESIGN-CODE][3:DESIGN-SITE][4:hblog.hs]*![5:post-list.html][6:post.html][7:Spec.hs] 

'<,'>EasyAlign 1/\(::\|=>\|->\)/

./run_tests.sh -m unphone


custom pandoc options:

https://nickcharlton.net/posts/custom-pandoc-options-hakyll-4.html


DESIGN-SITE is what we're aiming for the site to look like.

DESIGN-CODE is the design of the code itself.

When ready, move both *into* the blog itself, and make them
symlinks.

Inline docs syntax: https://www.haskell.org/haddock/doc/html/ch03s02.html

Should probably install https://github.com/vim-pandoc/vim-pandoc
globally, and use that for all markdown.

TODO
----

- make a test that fails when title: is unset
- make a script that walks the files, and for each file:
  - records the last mod time
  - runs pandoc to/from markdown
  - checks the file in (with the recorded mod time) if any diffs
  - runs unphone
  - checks the file in (with the recorded mod time (+ a bit?)) if any diffs
  - runs rectifier
  - checks the file in (with the recorded mod time (+ a bit?)) if any diffs
- ? can you think of a test to exercise:       fail $ "getGitTime: Couldn't find the time for " ++ (show ident) ++ " in GitTimes list " ++ (show times) 
- We have both
  _site/categories/computing.html
  _site/posts/computing/index.html
  , do we want both?  How would a user end up on one or the other?
- move css/ , index.html , etc into assets/ ?
  - Not sure about that, but index.html seems silly; have
  posts/[site]/index.md with whatever verbiage ; left sidebar
  favorites is posts/[site]/faves.md
- make "Posted in: " not show up in the rendering if there's no
tags; also maybe rename that to "Tags: " or something
- Make the category banner work
- make script to run the generation, send upset email if it doesn't
work, and push the results into our webspace
- Nice-to-have: generate a history page for each page that does colored diff
markup



Note to self:

  Git file create time:

    git log --diff-filter=A --follow --format=%aD -1 -- README.md

  tiki export: 

    https://www.mediawiki.org/wiki/Manual:TikiWiki_Conversion#Exporting

hakyll explanations / helpers:

  https://github.com/beerendlauwers/hakyll-extra

  https://jaspervdj.be/hakyll/tutorials.html#external-articles

  https://groups.google.com/forum/#!topic/hakyll/y16jUQ_oFEA


hakyll examples:

  https://gist.github.com/kkspeed/1dfb964009b19ae00ac3
  
  better: https://github.com/kkspeed/WebBlog
  
  http://gist.github.com/kowey/5517578
  
  https://github.com/search?q=buildTagsWith&type=Code&utf8=%E2%9C%93
  
  http://jaspervdj.be/
  
    https://github.com/jaspervdj/jaspervdj/blob/ae5f215339a29d14269fe6a5fb5b34870be2c178/src/Main.hs
